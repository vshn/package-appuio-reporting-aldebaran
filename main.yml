---
applications:
  - appuio-reporting as appuio-reporting-aldebaran

parameters:
  pkg.appuio_reporting_aldebaran:
    odoo:
      metered_billing_endpoint: null
      oauth:
        token_endpoint: null
        client_id: null
        client_secret: null
    prometheus:
      url: null
      org_id: null

  appuio_reporting_aldebaran:
    network_policies:
      target_namespaces:
        vshn-appuio-mimir: true
    namespaceMetadata:
      annotations:
        # We have 101 cron jobs ðŸ™ƒ
        resourcequota.appuio.io/organization-objects.count_jobs.batch: '500'
        resourcequota.appuio.io/organization-compute-terminating.pods: "10"
        resourcequota.appuio.io/organization-compute-terminating.limits.cpu: "8"
        resourcequota.appuio.io/organization-compute-terminating.limits.memory: 10Gi
    prometheus: ${pkg.appuio_reporting_aldebaran:prometheus}
    odoo: ${pkg.appuio_reporting_aldebaran:odoo}
    cluster_id_to_name_map:
      c-appuio-cloudscale-lpg-2: 'cloudscale.ch - LPG 2'
      c-appuio-exoscale-ch-gva-2-0: 'Exoscale - CH-GVA-2 0'
    rules:
      legacy_appuio_managed_clusters:
        enabled: true
        prometheus_org_id: appuio-managed-openshift-billing
        products:
          - product_id: 'openshift-cloudscale-cluster-premium'
            params:
              cloud_provider: cloudscale
              vshn_service_level: premium
          - product_id: 'openshift-cloudscale-cluster-professional'
            params:
              cloud_provider: cloudscale
              vshn_service_level: professional
          - product_id: 'openshift-cloudscale-cluster-standard'
            params:
              cloud_provider: cloudscale
              vshn_service_level: standard
          - product_id: 'openshift-cloudscale-cluster-zero'
            params:
              cloud_provider: cloudscale
              vshn_service_level: zero
          - product_id: 'openshift-exoscale-cluster-premium'
            params:
              cloud_provider: exoscale
              vshn_service_level: premium
          - product_id: 'openshift-exoscale-cluster-professional'
            params:
              cloud_provider: exoscale
              vshn_service_level: professional
          - product_id: 'openshift-exoscale-cluster-standard'
            params:
              cloud_provider: exoscale
              vshn_service_level: standard
          - product_id: 'openshift-exoscale-cluster-zero'
            params:
              cloud_provider: exoscale
              vshn_service_level: zero
          - product_id: 'openshift-onprem-cluster-premium'
            params:
              cloud_provider: vsphere|none
              vshn_service_level: premium
          - product_id: 'openshift-onprem-cluster-professional'
            params:
              cloud_provider: vsphere|none
              vshn_service_level: professional
          - product_id: 'openshift-onprem-cluster-standard'
            params:
              cloud_provider: vsphere|none
              vshn_service_level: standard
          - product_id: 'openshift-onprem-cluster-zero'
            params:
              cloud_provider: vsphere|none
              vshn_service_level: zero
          - product_id: 'openshift-xelon-cluster-premium'
            params:
              cloud_provider: xelon
              vshn_service_level: premium
          - product_id: 'openshift-xelon-cluster-professional'
            params:
              cloud_provider: xelon
              vshn_service_level: professional
          - product_id: 'openshift-xelon-cluster-standard'
            params:
              cloud_provider: xelon
              vshn_service_level: standard
          - product_id: 'openshift-xelon-cluster-zero'
            params:
              cloud_provider: xelon
              vshn_service_level: zero
        instance_id_pattern: 'ocp-cluster-%(cluster_id)s'
        item_group_description_pattern: 'APPUiO Managed OpenShift - Cluster: %(cluster_id)s'
        unit_id: 'uom_uom_53_4a7e8f3e' #Cluster-Hour
        query_pattern: |
          # Calculates number of clusters per cluster. Always returns 1.
          # Max values over one hour.
          max_over_time(
            # Use aggregation to drop labels of no interest.
            group by(cluster_id, sales_order) (
              appuio_managed_info{
                cloud_provider=~"%(cloud_provider)s",
                vshn_service_level="%(vshn_service_level)s",
              }
            )[59m:1m]
          )

      appuio_managed_vcpu:
        enabled: true
        prometheus_org_id: appuio-managed-openshift-billing
        products:
          - product_id: 'openshift-cloudscale-storagevcpu-besteffort'
            params:
              cloud_provider: cloudscale
              role: storage
              vshn_service_level: best_effort
          - product_id: 'openshift-cloudscale-storagevcpu-guaranteed'
            params:
              cloud_provider: cloudscale
              role: storage
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-cloudscale-storagevcpu-premium'
            params:
              cloud_provider: cloudscale
              role: storage
              vshn_service_level: premium
          - product_id: 'openshift-cloudscale-storagevcpu-professional'
            params:
              cloud_provider: cloudscale
              role: storage
              vshn_service_level: professional
          - product_id: 'openshift-cloudscale-storagevcpu-standard'
            params:
              cloud_provider: cloudscale
              role: storage
              vshn_service_level: standard
          - product_id: 'openshift-cloudscale-workervcpu-besteffort'
            params:
              cloud_provider: cloudscale
              role: app
              vshn_service_level: best_effort
          - product_id: 'openshift-cloudscale-workervcpu-guaranteed'
            params:
              cloud_provider: cloudscale
              role: app
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-cloudscale-workervcpu-premium'
            params:
              cloud_provider: cloudscale
              role: app
              vshn_service_level: premium
          - product_id: 'openshift-cloudscale-workervcpu-professional'
            params:
              cloud_provider: cloudscale
              role: app
              vshn_service_level: professional
          - product_id: 'openshift-cloudscale-workervcpu-standard'
            params:
              cloud_provider: cloudscale
              role: app
              vshn_service_level: standard
          - product_id: 'openshift-cloudscale-workervcpu-zero'
            params:
              cloud_provider: cloudscale
              role: app
              vshn_service_level: zero
          - product_id: 'openshift-exoscale-storagevcpu-besteffort'
            params:
              cloud_provider: exoscale
              role: storage
              vshn_service_level: best_effort
          - product_id: 'openshift-exoscale-storagevcpu-guaranteed'
            params:
              cloud_provider: exoscale
              role: storage
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-exoscale-storagevcpu-premium'
            params:
              cloud_provider: exoscale
              role: storage
              vshn_service_level: premium
          - product_id: 'openshift-exoscale-storagevcpu-professional'
            params:
              cloud_provider: exoscale
              role: storage
              vshn_service_level: professional
          - product_id: 'openshift-exoscale-storagevcpu-standard'
            params:
              cloud_provider: exoscale
              role: storage
              vshn_service_level: standard
          - product_id: 'openshift-exoscale-workervcpu-besteffort'
            params:
              cloud_provider: exoscale
              role: app
              vshn_service_level: best_effort
          - product_id: 'openshift-exoscale-workervcpu-guaranteed'
            params:
              cloud_provider: exoscale
              role: app
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-exoscale-workervcpu-premium'
            params:
              cloud_provider: exoscale
              role: app
              vshn_service_level: premium
          - product_id: 'openshift-exoscale-workervcpu-professional'
            params:
              cloud_provider: exoscale
              role: app
              vshn_service_level: professional
          - product_id: 'openshift-exoscale-workervcpu-standard'
            params:
              cloud_provider: exoscale
              role: app
              vshn_service_level: standard
          - product_id: 'openshift-exoscale-workervcpu-zero'
            params:
              cloud_provider: exoscale
              role: app
              vshn_service_level: zero
          - product_id: 'openshift-openstackcsp-workervcpu-besteffort'
            params:
              cloud_provider: openstackcsp
              role: app
              vshn_service_level: best_effort
          - product_id: 'openshift-openstackcsp-workervcpu-guaranteed'
            params:
              cloud_provider: openstackcsp
              role: app
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-openstackcsp-workervcpu-premium'
            params:
              cloud_provider: openstackcsp
              role: app
              vshn_service_level: premium
          - product_id: 'openshift-openstackcsp-workervcpu-professional'
            params:
              cloud_provider: openstackcsp
              role: app
              vshn_service_level: professional
          - product_id: 'openshift-openstackcsp-workervcpu-standard'
            params:
              cloud_provider: openstackcsp
              role: app
              vshn_service_level: standard
          - product_id: 'openshift-openstackcsp-workervcpu-zero'
            params:
              cloud_provider: openstackcsp
              role: app
              vshn_service_level: zero
          - product_id: 'openshift-openstackonprem-workervcpu-besteffort'
            params:
              cloud_provider: openstack|openstackonprem
              role: app
              vshn_service_level: best_effort
          - product_id: 'openshift-openstackonprem-workervcpu-guaranteed'
            params:
              cloud_provider: openstack|openstackonprem
              role: app
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-openstackonprem-workervcpu-premium'
            params:
              cloud_provider: openstack|openstackonprem
              role: app
              vshn_service_level: premium
          - product_id: 'openshift-openstackonprem-workervcpu-professional'
            params:
              cloud_provider: openstack|openstackonprem
              role: app
              vshn_service_level: professional
          - product_id: 'openshift-openstackonprem-workervcpu-standard'
            params:
              cloud_provider: openstack|openstackonprem
              role: app
              vshn_service_level: standard
          - product_id: 'openshift-openstackonprem-workervcpu-zero'
            params:
              cloud_provider: openstack|openstackonprem
              role: app
              vshn_service_level: zero
          - product_id: 'openshift-vspherecsp-workervcpu-besteffort'
            params:
              cloud_provider: vspherecsp
              role: app
              vshn_service_level: best_effort
          - product_id: 'openshift-vspherecsp-workervcpu-guaranteed'
            params:
              cloud_provider: vspherecsp
              role: app
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-vspherecsp-workervcpu-premium'
            params:
              cloud_provider: vspherecsp
              role: app
              vshn_service_level: premium
          - product_id: 'openshift-vspherecsp-workervcpu-professional'
            params:
              cloud_provider: vspherecsp
              role: app
              vshn_service_level: professional
          - product_id: 'openshift-vspherecsp-workervcpu-standard'
            params:
              cloud_provider: vspherecsp
              role: app
              vshn_service_level: standard
          - product_id: 'openshift-vspherecsp-workervcpu-zero'
            params:
              cloud_provider: vspherecsp
              role: app
              vshn_service_level: zero
          - product_id: 'openshift-vsphereonprem-workervcpu-besteffort'
            params:
              cloud_provider: vsphere|vsphereonprem
              role: app
              vshn_service_level: best_effort
          - product_id: 'openshift-vsphereonprem-workervcpu-guaranteed'
            params:
              cloud_provider: vsphere|vsphereonprem
              role: app
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-vsphereonprem-workervcpu-premium'
            params:
              cloud_provider: vsphere|vsphereonprem
              role: app
              vshn_service_level: premium
          - product_id: 'openshift-vsphereonprem-workervcpu-professional'
            params:
              cloud_provider: vsphere|vsphereonprem
              role: app
              vshn_service_level: professional
          - product_id: 'openshift-vsphereonprem-workervcpu-standard'
            params:
              cloud_provider: vsphere|vsphereonprem
              role: app
              vshn_service_level: standard
          - product_id: 'openshift-vsphereonprem-workervcpu-zero'
            params:
              cloud_provider: vsphere|vsphereonprem
              role: app
              vshn_service_level: zero
          - product_id: 'openshift-xelon-workervcpu-besteffort'
            params:
              cloud_provider: xelon
              role: app
              vshn_service_level: best_effort
          - product_id: 'openshift-xelon-workervcpu-guaranteed'
            params:
              cloud_provider: xelon
              role: app
              vshn_service_level: guaranteed_availability
          - product_id: 'openshift-xelon-workervcpu-premium'
            params:
              cloud_provider: xelon
              role: app
              vshn_service_level: premium
          - product_id: 'openshift-xelon-workervcpu-professional'
            params:
              cloud_provider: xelon
              role: app
              vshn_service_level: professional
          - product_id: 'openshift-xelon-workervcpu-standard'
            params:
              cloud_provider: xelon
              role: app
              vshn_service_level: standard
          - product_id: 'openshift-xelon-workervcpu-zero'
            params:
              cloud_provider: xelon
              role: app
              vshn_service_level: zero
        instance_id_pattern: 'ocp-vcpu-%(cluster_id)s-%(role)s'
        item_group_description_pattern: 'APPUiO Managed OpenShift - Cluster: %(cluster_id)s'
        unit_id: 'uom_uom_49_440b0fa7' #vCPU-Hour
        query_pattern: |
          # Calculates vCPUs for app nodes of a cluster
          # Max values over one hour.
          max_over_time(
            # Sum the vCPUs by cluster
            sum by(cluster_id, role) (
                # Get the node vCPUs
                node_cpu_info
                # Limit to worker nodes only
                * on (cluster_id, instance) group_left(role) (
                    # node_cpu_info and kube_node_role use different labels to identify the node.
                    label_join(kube_node_role{role="%(role)s"}, "instance", "", "node")
                )
            )[59m:1m]
          )
          # Pull in the APPUiO managed info labels
          * on(cluster_id) group_left(sales_order) appuio_managed_info{
              cloud_provider=~"%(cloud_provider)s",
              vshn_service_level="%(vshn_service_level)s",
          }

      legacy_appuio_rke_cluster:
        enabled: true
        prometheus_org_id: appuio-managed-kubernetes-services-billing
        products:
          - product_id: 'kubernetes-iaas-cluster-premium'
            params:
              vshn_service_level: premium
          - product_id: 'kubernetes-iaas-cluster-professional'
            params:
              vshn_service_level: professional
          - product_id: 'kubernetes-iaas-cluster-standard'
            params:
              vshn_service_level: standard
          - product_id: 'kubernetes-iaas-cluster-zero'
            params:
              vshn_service_level: zero
        instance_id_pattern: 'rke-cluster-%(cluster_id)s'
        item_group_description_pattern: 'APPUiO Managed - Cluster: %(cluster_id)s' # TODO
        unit_id: "uom_uom_53_4a7e8f3e" #Cluster-Hour
        query_pattern: |
          max_over_time(
            group by(cluster_id, sales_order) (
              appuio_managed_info{
                sales_order!="TERMINATED",
                sales_order!="NONE",
                distribution=~"rancher|rke2",
                vshn_service_level="%(vshn_service_level)s",
              }
            )[59m:1m]
          )

      legacy_appuio_rke_node:
        enabled: true
        prometheus_org_id: appuio-managed-kubernetes-services-billing
        products:
          - product_id: 'kubernetes-iaas-node-premium'
            params:
              vshn_service_level: premium
          - product_id: 'kubernetes-iaas-node-professional'
            params:
              vshn_service_level: professional
          - product_id: 'kubernetes-iaas-node-standard'
            params:
              vshn_service_level: standard
          - product_id: 'kubernetes-iaas-node-zero'
            params:
              vshn_service_level: zero
        instance_id_pattern: 'rke-node-%(cluster_id)s'
        item_group_description_pattern: 'APPUiO Managed - Cluster: %(cluster_id)s' # TODO
        unit_id: "uom_uom_191_55730e52" #Node-Hour
        query_pattern: |
          max_over_time(
            count by(cluster_id) (
              kube_node_labels
              * on(node) group_left() (max by (node) (kube_node_role{role="worker"}))
            )[59m:1m]
          )
          * on(cluster_id) group_left(sales_order) appuio_managed_info{
            sales_order!="TERMINATED",
            sales_order!="NONE",
            distribution=~"rke2|rancher",
            vshn_service_level="%(vshn_service_level)s",
          }

      cloud_kubernetes:
        enabled: true
        prometheus_org_id: appuio-managed-kubernetes-services-billing
        products:
          - product_id: 'kubernetes-awseks-vcpu-besteffort'
            params:
              distribution: eks
              cloud_provider: aws
              vshn_service_level: best_effort
          - product_id: 'kubernetes-awseks-vcpu-guaranteed'
            params:
              distribution: eks
              cloud_provider: aws
              vshn_service_level: guaranteed_availability
          - product_id: 'kubernetes-azureaks-vcpu-besteffort'
            params:
              distribution: aks
              cloud_provider: azure
              vshn_service_level: best_effort
          - product_id: 'kubernetes-azureaks-vcpu-guaranteed'
            params:
              distribution: aks
              cloud_provider: azure
              vshn_service_level: guaranteed_availability
          - product_id: 'kubernetes-exoscalesks-vcpu-besteffort'
            params:
              distribution: sks
              cloud_provider: exoscale
              vshn_service_level: best_effort
          - product_id: 'kubernetes-exoscalesks-vcpu-guaranteed'
            params:
              distribution: sks
              cloud_provider: exoscale
              vshn_service_level: guaranteed_availability
          - product_id: 'kubernetes-googlegke-vcpu-besteffort'
            params:
              distribution: gke
              cloud_provider: google
              vshn_service_level: best_effort
          - product_id: 'kubernetes-googlegke-vcpu-guaranteed'
            params:
              distribution: gke
              cloud_provider: google
              vshn_service_level: guaranteed_availability
        instance_id_pattern: 'cloud_k8s-vcpu-%(cluster_id)s'
        item_group_description_pattern: 'APPUiO Managed - Cluster: %(cluster_id)s' # TODO
        unit_id: "uom_uom_49_440b0fa7" #vCPU-Hour
        query_pattern: |
          max_over_time(sum by(cluster_id) (node_cpu_info)[59m:1m])
          # Pull in the APPUiO managed info labels
          * on(cluster_id) group_left(sales_order) appuio_managed_info{
              sales_order!="NONE",
              sales_order!="TERMINATED",
              cloud_provider="%(cloud_provider)s",
              distribution="%(distribution)s",
              vshn_service_level="%(vshn_service_level)s",
          }

      cloud_kubernetes_legacy_cluster:
        enabled: true
        prometheus_org_id: appuio-managed-kubernetes-services-billing
        products:
          - product_id: 'kubernetes-hyperscaler-cluster-premium'
            params:
              vshn_service_level: premium
          - product_id: 'kubernetes-hyperscaler-cluster-professional'
            params:
              vshn_service_level: professional
          - product_id: 'kubernetes-hyperscaler-cluster-standard'
            params:
              vshn_service_level: standard
          - product_id: 'kubernetes-hyperscaler-cluster-zero'
            params:
              vshn_service_level: zero
        instance_id_pattern: 'cloud_k8s-cluster-%(cluster_id)s'
        item_group_description_pattern: 'APPUiO Managed - Cluster: %(cluster_id)s' # TODO
        unit_id: "uom_uom_53_4a7e8f3e" #Cluster-Hour
        query_pattern: |
          max_over_time(
            group by(cluster_id, sales_order) (
              appuio_managed_info{
                  distribution!="rke2",
                  distribution!="rancher",
                  sales_order!="TERMINATED",
                  sales_order!="NONE",
                  vshn_service_level="%(vshn_service_level)s",
              }
            )[59m:1m]
          )

      cloud_kubernetes_legacy_node:
        enabled: true
        prometheus_org_id: appuio-managed-kubernetes-services-billing
        products:
          - product_id: 'kubernetes-hyperscaler-node-premium'
            params:
              vshn_service_level: premium
          - product_id: 'kubernetes-hyperscaler-node-professional'
            params:
              vshn_service_level: professional
          - product_id: 'kubernetes-hyperscaler-node-standard'
            params:
              vshn_service_level: standard
          - product_id: 'kubernetes-hyperscaler-node-zero'
            params:
              vshn_service_level: zero
        instance_id_pattern: 'cloud_k8s-node-%(cluster_id)s'
        item_group_description_pattern: 'APPUiO Managed - Cluster: %(cluster_id)s' # TODO
        unit_id: "uom_uom_191_55730e52" #Node-Hour
        query_pattern: |
          max_over_time(
            count by(cluster_id) (group by (cluster_id,node) (kube_node_labels))
          [59m:1m])
          # Pull in the APPUiO managed info labels
          * on(cluster_id) group_left(sales_order) appuio_managed_info{
              distribution!="rke2",
              distribution!="rancher",
              sales_order!="TERMINATED",
              sales_order!="NONE",
              vshn_service_level="%(vshn_service_level)s",
          }

      appuio_cloud_compute:
        enabled: true
        prometheus_org_id: appuio-cloud-metering-c-appuio-cloudscale-lpg-2|appuio-cloud-metering-c-appuio-exoscale-ch-gva-2-0
        products:
          - product_id: appuiocloud-compute-cloudscaleflex
            params:
              node_class: flex
              zone: c-appuio-cloudscale-lpg-2
              cpu_ratio: "4294967296" # 4096 MiB / core
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-cloudscale-lpg-2}
          - product_id: appuiocloud-compute-cloudscaleplus
            params:
              node_class: plus
              zone: c-appuio-cloudscale-lpg-2
              cpu_ratio: "4294967296" # 4096 MiB / core
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-cloudscale-lpg-2}
          - product_id: appuiocloud-compute-exoscalestandard
            params:
              node_class: ""
              zone: c-appuio-exoscale-ch-gva-2-0
              cpu_ratio: "5333057536" # 5086 MiB / core
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-exoscale-ch-gva-2-0}
        instance_id_pattern: 'appuio_cloud-compute-%(cluster_id)s-%(namespace)s'
        item_group_description_pattern: 'APPUiO Cloud - Zone: %(name)s / Namespace: %(namespace)s'
        unit_id: uom_uom_196_8b86c0c5 # MiB - Minute
        query_pattern: |
          label_replace(
            # Sum values over one hour.
            sum_over_time(
              # Average over a one-minute time frame.
              # NOTE: This is a sliding window. Results vary based on the queries execution time.
              avg_over_time(
                clamp_min(
                  (
                    # Get the maximum of requested and used memory.
                    # TODO Is there a better way to get the maximum of two vectors?
                    (
                      # Select used memory if higher.
                      (
                        sum by(cluster_id, namespace, label_appuio_io_node_class) (container_memory_working_set_bytes{image!="", cluster_id="%(zone)s"}
                          * on(cluster_id, node) group_left(label_appuio_io_node_class) (min by(cluster_id, node, label_appuio_io_node_class) (kube_node_labels{label_appuio_io_node_class="%(node_class)s"})))
                        # IMPORTANT: one clause must use equal. If used grater and lesser than, equal values will be dropped.
                        >=
                        sum by(cluster_id, namespace, label_appuio_io_node_class) (kube_pod_container_resource_requests{resource="memory", cluster_id="%(zone)s"}
                          * on(uid, cluster_id, pod, namespace) group_left kube_pod_status_phase{phase="Running"}
                          * on(cluster_id, node) group_left(label_appuio_io_node_class) (min by(cluster_id, node, label_appuio_io_node_class) (kube_node_labels{label_appuio_io_node_class="%(node_class)s"})))
                      )
                      or
                      # Select reserved memory if higher.
                      (
                        # IMPORTANT: The desired time series must always be first.
                        sum by(cluster_id, namespace, label_appuio_io_node_class) (kube_pod_container_resource_requests{resource="memory", cluster_id="%(zone)s"}
                          * on(uid, cluster_id, pod, namespace) group_left kube_pod_status_phase{phase="Running"}
                          * on(cluster_id, node) group_left(label_appuio_io_node_class) (min by(cluster_id, node, label_appuio_io_node_class) (kube_node_labels{label_appuio_io_node_class="%(node_class)s"})))
                        >
                        sum by(cluster_id, namespace, label_appuio_io_node_class) (container_memory_working_set_bytes{image!="", cluster_id="%(zone)s"}
                          * on(cluster_id, node) group_left(label_appuio_io_node_class) (min by(cluster_id, node, label_appuio_io_node_class) (kube_node_labels{label_appuio_io_node_class="%(node_class)s"})))
                      )
                    )
                    # Add CPU requests in violation to the ratio provided by the platform.
                    + clamp_min(
                      # Convert CPU request to their memory equivalent.
                      sum by(cluster_id, namespace, label_appuio_io_node_class) (
                        kube_pod_container_resource_requests{resource="cpu", cluster_id="%(zone)s"} * on(uid, cluster_id, pod, namespace) group_left kube_pod_status_phase{phase="Running"}
                          * on(cluster_id, node) group_left(label_appuio_io_node_class) (min by(cluster_id, node, label_appuio_io_node_class) (kube_node_labels{label_appuio_io_node_class="%(node_class)s"}))
                        # CPU ratio depending on cluster
                        * %(cpu_ratio)s
                      )
                      # Subtract memory request
                      - sum by(cluster_id, namespace, label_appuio_io_node_class) (kube_pod_container_resource_requests{resource="memory", cluster_id="%(zone)s"}
                        * on(uid, cluster_id, pod, namespace) group_left kube_pod_status_phase{phase="Running"}
                        * on(cluster_id, node) group_left(label_appuio_io_node_class) (min by(cluster_id, node, label_appuio_io_node_class) (kube_node_labels{label_appuio_io_node_class="%(node_class)s"})))
                    # Only values above zero are in violation.
                    , 0)
                  )
                  *
                  # Join namespace label `label_appuio_io_organization` as `organization`.
                  on(cluster_id, namespace)
                  group_left(organization)
                  (
                    bottomk(1,
                      min by (cluster_id, namespace, organization) (
                        label_replace(
                          kube_namespace_labels{label_appuio_io_organization=~".+"},
                          "organization",
                          "$1",
                          "label_appuio_io_organization", "(.*)"
                        )
                      )
                    ) by(cluster_id, namespace)
                  )
                  *
                  # Join APPUiO organization info to get the `sales_order`
                  on(organization)
                  group_left(sales_order)
                  (
                    appuio_control_organization_info{namespace="appuio-control-api-production"}
                  ),
                  # At least return 128MiB
                  128 * 1024 * 1024
                )[45s:15s]
              )[59m:1m]
            )
            # Convert to MiB
            / 1024 / 1024
          , "name", "%(name)s", "", "")

      appuio_cloud_storage:
        enabled: true
        prometheus_org_id: appuio-cloud-metering-c-appuio-cloudscale-lpg-2|appuio-cloud-metering-c-appuio-exoscale-ch-gva-2-0
        products:
          - product_id: appuiocloud-blockstorage-cloudscalebulk
            params:
              storage_class: bulk.*
              zone: c-appuio-cloudscale-lpg-2
              storage_type: block
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-cloudscale-lpg-2}
          - product_id: appuiocloud-blockstorage-cloudscalessd
            params:
              storage_class: ssd.*
              zone: c-appuio-cloudscale-lpg-2
              storage_type: block
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-cloudscale-lpg-2}
          - product_id: appuiocloud-filestorage-cloudscalessd
            params:
              storage_class: cephfs-fspool-cluster
              zone: c-appuio-cloudscale-lpg-2
              storage_type: file
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-cloudscale-lpg-2}
          - product_id: appuiocloud-blockstorage-exoscalessd
            params:
              storage_class: rbd-storagepool-cluster
              zone: c-appuio-exoscale-ch-gva-2-0
              storage_type: block
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-exoscale-ch-gva-2-0}
          - product_id: appuiocloud-filestorage-exoscalessd
            params:
              storage_class: cephfs-fspool-cluster
              zone: c-appuio-exoscale-ch-gva-2-0
              storage_type: file
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-exoscale-ch-gva-2-0}
        instance_id_pattern: 'appuio_cloud-%(storage_type)sstorage-%(cluster_id)s-%(namespace)s'
        item_group_description_pattern: 'APPUiO Cloud - Zone: %(name)s / Namespace: %(namespace)s'
        unit_id: uom_uom_196_8b86c0c5 # MiB - Minute
        query_pattern: |
          label_replace(
            label_replace(
              # Sum values over one hour.
              sum_over_time(
                clamp_min(
                  sum by(cluster_id, organization, namespace, storageclass, sales_order)(
                    # Get the PersistentVolume size
                    kube_persistentvolume_capacity_bytes
                    *
                    # Join the PersistentVolumeClaim to get the namespace
                    on (cluster_id,persistentvolume)
                    group_left(namespace, name)
                    label_replace(
                      kube_persistentvolume_claim_ref,
                      "namespace",
                      "$1",
                      "claim_namespace",
                      "(.+)(-.*)?"
                    )
                    *
                    # Join the PersistentVolume info to get StorageClass
                    on (cluster_id,persistentvolume)
                    group_left(storageclass)
                    # Do not differantiate between regular and encrypted storage class versions.
                    min by (cluster_id, persistentvolume, storageclass) (
                      label_replace(
                        kube_persistentvolume_info{cluster_id="%(zone)s",storageclass=~"%(storage_class)s"},
                        "storageclass",
                        "$1",
                        "storageclass",
                        "([^-]+)-encrypted"
                      )
                    )
                    *
                    # Join the namespace label to get the tenant
                    on(cluster_id,namespace)
                    group_left(organization)
                    (
                      bottomk(1,
                        min by (cluster_id, namespace, organization) (
                          label_replace(
                            kube_namespace_labels{label_appuio_io_organization=~".+"},
                            "organization",
                            "$1",
                            "label_appuio_io_organization", "(.*)"
                          )
                        )
                      ) by(cluster_id, namespace)
                    )

                    *
                    # Join APPUiO organization info to get the `sales_order`
                    on(organization)
                    group_left(sales_order)
                    (
                      appuio_control_organization_info{namespace="appuio-control-api-production"}
                    )
                  ),
                  1024 * 1024 * 1024
                )[59m:1m]
              )
              # Convert to MiB
              / 1024 / 1024
            , "name", "%(name)s", "", "")
          , "storage_type", "%(storage_type)s", "", "")

      appuio_cloud_loadbalancer:
        enabled: true
        prometheus_org_id: appuio-cloud-metering-c-appuio-cloudscale-lpg-2|appuio-cloud-metering-c-appuio-exoscale-ch-gva-2-0
        products:
          - product_id: appuiocloud-loadbalancer-cloudscale
            params:
              zone: c-appuio-cloudscale-lpg-2
              name: ${appuio_reporting_aldebaran:cluster_id_to_name_map:c-appuio-cloudscale-lpg-2}
        instance_id_pattern: 'appuio_cloud-lb-%(cluster_id)s-%(namespace)s'
        item_group_description_pattern: 'APPUiO Cloud - Zone: %(name)s / Namespace: %(namespace)s'
        unit_id: uom_uom_44_6c2bd44e # instance-minutes
        query_pattern: |
          label_replace(
            # Sum values over one hour.
            sum_over_time(
              (
                # Get number of services of type load balancer
                sum by(cluster_id, namespace) (kube_service_spec_type{type="LoadBalancer", cluster_id="%(zone)s"})
                *
                # Join the namespace label to get the tenant
                on(cluster_id, namespace)
                group_left(organization)
                (
                  bottomk(1,
                    min by (cluster_id, namespace, organization) (
                      label_replace(
                        kube_namespace_labels{label_appuio_io_organization=~".+"},
                        "organization",
                        "$1",
                        "label_appuio_io_organization", "(.*)"
                      )
                    )
                  ) by(cluster_id, namespace)
                )
                *
                on(organization)
                group_left(sales_order)
                (
                  appuio_control_organization_info{namespace="appuio-control-api-production"}
                )
              )[59m:1m]
            )
          , "name", "%(name)s", "", "")
